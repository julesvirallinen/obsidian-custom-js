import typescript from '@rollup/plugin-typescript';
import { nodeResolve } from '@rollup/plugin-node-resolve';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';

const isProd = process.env.BUILD === 'production';

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/
`;

const cfg = {
  input: 'main.ts',
  output: {
    dir: isProd ? 'build' : './',
    sourcemap: 'inline',
    sourcemapExcludeSources: isProd,
    format: 'cjs',
    exports: 'default',
    banner,
  },
  external: ['obsidian'],
  plugins: [
    typescript({
      allowSyntheticDefaultImports: true,
    }),
    nodeResolve({ browser: true }),
    commonjs(),
  ],
  onwarn: (warning, warn) => {
    // Quiet rollup warning about eval
    if (/Use of eval is strongly discouraged/.test(warning.message)) return;
    warn(warning);
  },
};

if (!isProd) {
  // Build by default to root of the plugin, but allow overriding if needed
  // run with overrides with  OUTPUT_DIR='<path>' npm run dev
  const devBuildPath = process.env.OUTPUT_DIR;

  if (devBuildPath) {
    cfg.plugins.push(
      copy({
        targets: [
          { src: 'manifest.json', dest: devBuildPath },
          {
            src: 'styles.css',
            dest: devBuildPath,
          },
          {
            src: 'main.js',
            dest: devBuildPath,
          },
        ],
      }),
    );
  }
}

export default cfg;
